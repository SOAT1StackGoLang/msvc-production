package transport

import (
	"context"
	"encoding/json"
	"errors"
	"net/http"

	"github.com/SOAT1StackGoLang/msvc-production/internal/endpoint"
	"github.com/SOAT1StackGoLang/msvc-production/internal/service"
	kitlog "github.com/go-kit/kit/log"
	"github.com/go-kit/kit/transport"
	httptransport "github.com/go-kit/kit/transport/http"
	"github.com/gorilla/mux"

	_ "github.com/SOAT1StackGoLang/msvc-production/docs" // docs is generated by Swag CLI, you have to import it.
	httpSwagger "github.com/swaggo/http-swagger"
)

var (
	ErrBadRequest = errors.New("parametros incorretos")
)

type errorer interface {
	error() error
}

func NewHttpHandler(pS service.ProductionService, logger kitlog.Logger) http.Handler {
	r := mux.NewRouter()
	sE := endpoint.MakeServerEndpoints(pS)

	options := []httptransport.ServerOption{
		httptransport.ServerErrorHandler(transport.NewLogErrorHandler(logger)),
		httptransport.ServerErrorEncoder(encodeError),
	}

	// POST /producao/ altera o status do pedido

	r.Methods(http.MethodPost).Path("/production").Handler(httptransport.NewServer(
		sE.UpdateOrderStatusEndpoint,
		decodeUpdateOrderRequest,
		encodeResponse,
		options...,
	))

	r.Methods(http.MethodGet).PathPrefix("/swagger").Handler(httpSwagger.Handler(
		httpSwagger.URL("/swagger/doc.json"), // URL pointing to the API definition
		httpSwagger.DeepLinking(true),
		httpSwagger.DocExpansion("none"),
		httpSwagger.DomID("swagger-ui"),
	))
	// redirect / to /swagger/index.html
	r.Methods(http.MethodGet).Path("/").Handler(http.RedirectHandler("/swagger/index.html", http.StatusMovedPermanently))

	return r
}

// POST /production - Update order status
//
//	@Summary		Update order status
//	@Tags			Production
//	@Accept			json
//	@Produce		json
//	@Description	Update order status the possible status are: "Recebido|Preparacao|Pronto|Finalizado|Cancelado"
//	@Param			request	body		string	true	"Update order status request data"	SchemaExample({\r\n "order_id": "123e4567-e89b-12d3-a456-426614174000",\r\n "status": "Preparacao"\r\n})
//	@Success		200		{string}	string	"ok"
//	@Failure		400		{string}	string	"error"
//	@Failure		500		{string}	string	"error"
//	@Router			/production [post]
func decodeUpdateOrderRequest(_ context.Context, r *http.Request) (request interface{}, err error) {
	var req endpoint.UpdateOrderRequest
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return endpoint.ErrorResponse{
			Description: "invalid request",
			Code:        http.StatusBadRequest,
		}, ErrBadRequest
	}

	return endpoint.UpdateOrderRequest{
		OrderID: req.OrderID,
		Status:  req.Status,
	}, nil
}
