// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SOAT1StackGoLang/msvc-production/internal/service (interfaces: CacheService)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/cache_mocks.go -package=mocks github.com/SOAT1StackGoLang/msvc-production/internal/service CacheService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	service "github.com/SOAT1StackGoLang/msvc-production/internal/service"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCacheService is a mock of CacheService interface.
type MockCacheService struct {
	ctrl     *gomock.Controller
	recorder *MockCacheServiceMockRecorder
}

// MockCacheServiceMockRecorder is the mock recorder for MockCacheService.
type MockCacheServiceMockRecorder struct {
	mock *MockCacheService
}

// NewMockCacheService creates a new mock instance.
func NewMockCacheService(ctrl *gomock.Controller) *MockCacheService {
	mock := &MockCacheService{ctrl: ctrl}
	mock.recorder = &MockCacheServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheService) EXPECT() *MockCacheServiceMockRecorder {
	return m.recorder
}

// GetOrder mocks base method.
func (m *MockCacheService) GetOrder(arg0 context.Context, arg1 uuid.UUID) (*service.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0, arg1)
	ret0, _ := ret[0].(*service.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockCacheServiceMockRecorder) GetOrder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockCacheService)(nil).GetOrder), arg0, arg1)
}

// SaveOrderStatusChanged mocks base method.
func (m *MockCacheService) SaveOrderStatusChanged(arg0 context.Context, arg1 service.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrderStatusChanged", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrderStatusChanged indicates an expected call of SaveOrderStatusChanged.
func (mr *MockCacheServiceMockRecorder) SaveOrderStatusChanged(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrderStatusChanged", reflect.TypeOf((*MockCacheService)(nil).SaveOrderStatusChanged), arg0, arg1)
}
