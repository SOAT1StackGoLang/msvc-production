// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SOAT1StackGoLang/msvc-production/internal/service (interfaces: Publisher)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/pubsub_mocks.go -package=mocks github.com/SOAT1StackGoLang/msvc-production/internal/service Publisher
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	service "github.com/SOAT1StackGoLang/msvc-production/internal/service"
	gomock "go.uber.org/mock/gomock"
)

// MockPublisher is a mock of Publisher interface.
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher.
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance.
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// PublishOrderStatusChanged mocks base method.
func (m *MockPublisher) PublishOrderStatusChanged(arg0 context.Context, arg1 service.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishOrderStatusChanged", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishOrderStatusChanged indicates an expected call of PublishOrderStatusChanged.
func (mr *MockPublisherMockRecorder) PublishOrderStatusChanged(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishOrderStatusChanged", reflect.TypeOf((*MockPublisher)(nil).PublishOrderStatusChanged), arg0, arg1)
}
